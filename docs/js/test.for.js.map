{"version":3,"names":[],"mappings":"","sources":["test/js/test.for.ts"],"sourcesContent":["import { interval } from 'rxjs';\nimport { take, takeUntil } from 'rxjs/operators';\nimport { Browser, Component, CoreModule, Module, Pipe } from '../../src/rxcomp';\n\n// component\nclass RootComponent extends Component {\n\tflag = false;\n\tnested = [\n\t\t{ items: [1, 2, 3, 4] },\n\t\t{ items: [1, 2, 3, 4] },\n\t\t{ items: [1, 2, 3, 4] }\n\t];\n\titems = [1, 2, 3, 4];\n\tobject = { a: 1, b: { c: 2 } };\n\n\tonInit() {\n\n\t\tif (true) {\n\t\t\tinterval(1000).pipe(\n\t\t\t\ttake(1000),\n\t\t\t\ttakeUntil(this.unsubscribe$)\n\t\t\t).subscribe(items => {\n\t\t\t\tthis.flag = !this.flag;\n\t\t\t\tthis.pushChanges();\n\t\t\t});\n\t\t}\n\t\t/*\n\t\tinterval(50).pipe(\n\t\t\ttake(1000),\n\t\t\ttakeUntil(this.unsubscribe$)\n\t\t).subscribe(items => {\n\t\t\tthis.items = new Array(1 + Math.floor(Math.random() * 9)).fill(0).map((x, i) => i + 1);\n\t\t\tthis.pushChanges();\n\t\t});\n\t\t*/\n\t}\n\n\tgetColor(index) {\n\t\treturn ['red', 'green', 'blue'][index % 3];\n\t}\n}\nRootComponent.meta = {\n\tselector: '[root-component]',\n};\n\n// pipe\nclass ExamplePipe extends Pipe {\n\tstatic transform(value) {\n\t\treturn value * 2;\n\t}\n}\nExamplePipe.meta = {\n\tname: 'example',\n};\n\nclass AppModule extends Module { }\nAppModule.meta = {\n\timports: [\n\t\tCoreModule\n\t],\n\tdeclarations: [\n\t\tExamplePipe,\n\t],\n\tbootstrap: RootComponent,\n};\n\nconst module = Browser.bootstrap(AppModule);\n"],"file":"test/js/test.for.ts"}